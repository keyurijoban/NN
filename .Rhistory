# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
DRT_ZOO
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
Classical; ML_Inspired; Lower_feature_space
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower_feature_space}
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
DRT_ZOO
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
Classical; ML_Inspired; Lower_feature_space
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower_feature_space}
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
DRT_ZOO
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
Classical; ML_Inspired; Lower_feature_space
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower_feature_space}
}
")
library(DiagrammeR)
ff<-grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
DRT_ZOO
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
Classical; ML_Inspired; Lower_feature_space
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower_feature_space}
}
")
plot(ff)
library(DiagrammeR)
ff<-grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
DRT_ZOO
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
Classical; ML_Inspired; Lower_feature_space
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower_feature_space}
}
")
ff
Sys.setenv(PATH = paste("/home/ramius/anaconda2/bin", Sys.getenv("PATH"), sep=":"))
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7]
DRT_ZOO
node [shape = circle,
fixedsize = true,
width = 0.9,fontsize=7] // sets as circles
Classical; ML_Inspired; Lower_feature_space
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower_feature_space}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor=OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor=MediumPurple]
Classical; ML_Inspired; Lower Dimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower Dimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor=OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor=MediumPurple]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired Lower Dimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor=OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor=MediumPurple]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical; ML_Inspired; LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
node[tooltip = IV+MutualInformation+ChiSquare]
Classical
node[tooltip=L1+L2]
ML_Inspired
node[tooltip=PCA+MDS-PLS+LDA]
LowerDimension
# several 'edge' statements
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled,tooltip=hi]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled,tooltip=true]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
ML_Inspired;LowerDimension
node[tooltip=IV+ChiSquare+MutualInfo]
Classical
DRT_ZOO->{Classical ML_Inspired LowerDimension}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip=IV+ChiSquare+MutualInformation]
DRT_ZOO->ML_Inspired [tooltip=L1+L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip=IVChiSquareMutualInformation]
DRT_ZOO->ML_Inspired [tooltip=L1L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip=IV ChiSquare MutualInformation]
DRT_ZOO->ML_Inspired [tooltip=L1 L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip='Used in']
DRT_ZOO->ML_Inspired [tooltip=L1L2]
DRT_ZOO->LowerDimension [tooltip=PCA]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
DRT_ZOO->Classical [tooltip='IV ChiSquare Mutual Information']
DRT_ZOO->ML_Inspired [tooltip='L1 L2']
DRT_ZOO->LowerDimension [tooltip='PCA MDS PLS LDA']
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
IV;ChiSquare;MutualInformation;L1;L2;PCA;MDS;LDA;PLS
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->{IV ChiSquare MutualInformation}
ML_Inspired->{L1,L2}
LowerDimension->{PCA MDS PLS LDA}
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
'IV Chisquare Mutual Information';'L1 L2'; 'PCA MDS PLS LDA'
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->'IV Chisquare Mutual Information'
ML_Inspired->'L1,L2'
LowerDimension->'PCA MDS PLS LDA'
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
'IV Chisquare Mutual Information';'L1 L2'; 'PCA MDS PLS LDA'
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->'IV Chisquare Mutual Information'
ML_Inspired->'L1 L2'
LowerDimension->'PCA MDS PLS LDA'
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 7]
# several 'node' statements
node [shape = box,
fontname = Helvetica,fontsize=7,fillcolor = OrangeRed,style=filled]
DRT_ZOO
node [shape = diamond,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
Classical;ML_Inspired;LowerDimension
node [shape = egg,
fixedsize = true,
width = 0.9,fontsize=7,fillcolor = MediumPurple,style=filled]
'IV Chisquare MI';'L1 L2'; 'PCA MDS PLS LDA'
DRT_ZOO->Classical [tooltip='Variable selection while modelling']
DRT_ZOO->ML_Inspired [tooltip='Variable selection while modelling']
DRT_ZOO->LowerDimension [tooltip='Exploration and Variable Selection']
Classical->'IV Chisquare MI'
ML_Inspired->'L1 L2'
LowerDimension->'PCA MDS PLS LDA'
}
")
rbind( c(0.2, 0.1, 0.15), c(0.1, 0.2, 0.25) )
?Sys.setenv
install.packages("randomForest")
library(randomForest)
?randomForest
Sys.setenv(PATH = paste("/home/ramius/anaconda2/bin", Sys.getenv("PATH"), sep=":"))
Sys.setenv(PATH = paste("/home/ramius/anaconda2/bin", Sys.getenv("PATH"), sep=":"))
?nb
Sys.setenv(PATH = paste("/home/ramius/anaconda2/bin", Sys.getenv("PATH"), sep=":"))
y=rep(5,10)
x=seq(1,10)
plot(x,y)
y=rep(5,10)
x=seq(1,10)
plot(x,y,type='l',col='blue')
y=rep(5,10)
x=seq(1,10)
plot(x,y,type='l',col='blue',jitter(y))
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='l',col='blue')
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='p',col='blue',ylim = c(0,7))
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='p',col='blue',ylim = c(0,7),ylab = 'Y dim',xlab = 'X dim')
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y),type='p',col='blue',ylim = c(0,7),ylab = 'Y dim',xlab = 'X dim')
y=rep(5,10)
x=seq(1,10)
plot(x,jitter(y,3),type='p',col='blue',ylim = c(0,7),ylab = 'Y dim',xlab = 'X dim')
setwd('/media/ramius/New Volume/Work/Jigsaw Academy/Corporate Trainings/Bocconi/Batch 3/Online Sessions')
library(slidify)
author('NN')
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
library(slidify)
install_github('slidify', 'ramnathv')
install.packages("yaml")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
